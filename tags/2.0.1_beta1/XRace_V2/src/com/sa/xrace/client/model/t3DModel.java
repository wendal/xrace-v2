///:~
/**
 * XRace V2
 * <p/>Use for ... ...
 * <p/>ID: $Id$
 * Last Commit:  $Author$
 * @version $Revision: $
 * 
 */
package com.sa.xrace.client.model;

import java.util.Iterator;
import java.util.Vector;

import javax.microedition.khronos.opengles.GL10;

import com.sa.xrace.client.math.Point3f;

/**
 * @author sliao
 * @version $Id$
 */
/**
 * This class is used to store the model data which is created by 3DS MAX.
 */
public final class t3DModel {
	/**
	 * 合成两个类 : Model t3DModel
	 */
	private int mModelID; // model's ID
    private int mType; // model's type
    private t3DModel mModel; // keeping model's data
    public Point3f mScale; // scale model on the x, y, z axis
//    private float mRadius; // for optimization
	
//    public void generate() {
//        mModel.generate();
//    }

    public void scale(GL10 gl) {
        gl.glScalef(mScale.x, mScale.y, mScale.z); // Scale the object on x, y
                                                   // and z axis
    }

//    public void draw(GL10 gl) {
//        mModel.draw(gl);
//    }

//    public t3DObject getObject(String objectName) {
//        return mModel.getObject(objectName);
//    }

    // {{member variables
    // management---------------------------------------------------
    public int getID() {
        return this.mModelID;

    }

    public int getType() {
        return this.mType;

    }

//    public Point3f getScale() {
//        return mScale;
//    }

    public t3DModel getModel() {
        return mModel;
    }
	
	
	
	
	
	//********************************************************
    
    public int numOfObjects; // number of objects
    public int numOfMaterials; // number of material
    public Vector<tMaterialInfo> Materials; // vectors keeping the materials
    public Vector<t3DObject> objects; // vectors keeping the objects
    // private Activity mainAcivity;

    public t3DModel(int modelID, int type,  Point3f scale,
            float radius) {
    	
    	this.mModel = this;
        this.mModelID = modelID;
        this.mType = type;
        this.mScale = scale;
    	
        this.Materials = new Vector<tMaterialInfo>();
        this.objects = new Vector<t3DObject>();
        // this.mainAcivity = mainAcivity;
        // ObjectNumber.regNew(this);
    }

    /**
     * This function would generate all the buffer for render according those
     * data has been imported .
     */
    public void generate() {

//        Iterator<t3DObject> t3DObjectIterator = objects.iterator();
//        while (t3DObjectIterator.hasNext()) {
//            t3DObject object = t3DObjectIterator.next();
    	for (t3DObject object : objects) {
            if (object.materialID >= 0) {
                // try {
                String strFilename = Materials.get(object.materialID).strFile;
                if (strFilename != null && !"".equals(strFilename)) {
                    // Log.e("Start Parse : ", strFilename);
                    // InputStream is =
                    // ObjectPool.assetManager.open(strFilename);
                    // DataInputStream dis = new DataInputStream(is);
                    object.loadBitmap(strFilename);
                    // Log.e("End Parse : ", strFilename);
                }
                // } catch (IOException e) {
                // e.printStackTrace();
                // }
            }
            object.createBuffer();
        }
    }

    /**
     * This function would render all objects in the model with the buffer that
     * has been generated by function generate().
     */
    public void draw(GL10 gl) {
        Iterator<t3DObject> t3DObjectIterator = objects.iterator();
        while (t3DObjectIterator.hasNext()) {
            t3DObject object = t3DObjectIterator.next();
            object.draw(gl);
        }
    }

    public t3DObject getObject(String objectName) {
        Iterator<t3DObject> t3DObjectIterator = objects.iterator();
        while (t3DObjectIterator.hasNext()) {
            t3DObject object = t3DObjectIterator.next();
            if (object.strName.equals(objectName)) {
                return object;
            }
        }
        return null;
    }
}

/**
 * This class is used to keep the material data.
 */
class tMaterialInfo {
    public String strName; // name of material
    public String strFile; // texture's filename
    public byte[] color; // RGB color

    public tMaterialInfo() {
        color = new byte[3];
    }

}